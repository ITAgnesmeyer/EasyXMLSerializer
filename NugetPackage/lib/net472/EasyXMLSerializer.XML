<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyXMLSerializer</name>
    </assembly>
    <members>
        <member name="T:EasyXMLSerializer.LogEventArgs">
            <summary>
            EventArgs for LogMessages
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.LogEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="P:EasyXMLSerializer.LogEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:EasyXMLSerializer.SerializeTool">
            <summary>
            SerializeTool
            </summary>
        </member>
        <member name="E:EasyXMLSerializer.SerializeTool.LogEvent">
            <summary>
            Event fired on Exceptions
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.#ctor(System.Type[])">
            <summary>
            Constructor for adding Types.
            this will create a internal list of XmlSerializers for each Type given.
            This will slow down the creation time but spead up the Serialization Time.
            </summary>
            <param name="types">List of Types </param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="fileName">Path to the File for Serialization</param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.#ctor(System.String,System.Type[])">
            <summary>
            Constructor for adding Types.
            this will create a internal list of XmlSerializers for each Type given.
            This will slow down the creation time but spead up the Serialization Time.
            </summary>
            <param name="fileName"></param>
            <param name="types"></param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.MapEvents(System.Xml.Serialization.XmlSerializer)">
            <summary>
            Maps the Events of XmlSerilizer.
            </summary>
            <param name="serializer">XmlSerializer Object</param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.UnMapEvents(System.Xml.Serialization.XmlSerializer)">
            <summary>
            Unmaps the Events from the XmlSerilizer Object
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.GetXmlSerializer(System.Type)">
            <summary>
            Creates a new XmlSerilizer or grap it from the intern List.
            </summary>
            <param name="objectType">Type of the Object to be serialized</param>
            <returns>Returns a new Instance of XmlSerilizer</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.ReadXmlFromString``1(System.String)">
            <summary>
            Creates a Object with the given type from a XML-String
            </summary>
            <typeparam name="T">Type of the returning Object</typeparam>
            <param name="xmlString">XML-String to be serialized</param>
            <returns>De-serialized object of the given Type</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.ReadXmlFromStream``1(System.IO.Stream)">
            <summary>
            De-serialize a Object with given Type from a Stream-object
            </summary>
            <typeparam name="T">Type of the returning Object</typeparam>
            <param name="stream">Stream - Object containing the XML-Data</param>
            <returns>De-serialized object of the given Type</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.WriteXmlToString``1(``0,System.String@)">
            <summary>
            Serialize the given Object to String
            </summary>
            <param name="objectToWrite">Object to write</param>
            <param name="returnString">Output String</param>
            <typeparam name="T">type of object to serialize</typeparam>
            <returns>True/False</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.SetXmlWriterSettings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.WriteXmlToStream``1(``0,System.IO.Stream)">
            <summary>
            Serialize a Object to XML by using the Stream.
            </summary>
            <typeparam name="T">Type of the given Object</typeparam>
            <param name="objectToWrite">Object to be serialized</param>
            <param name="stream">Stream - object for Serializing</param>
            <returns>Returns True if the Serializing was OK. Returns false if the Serializing fails</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.ReadXmlFile``1(System.String)">
            <summary>
            De-serialize a given XML-Fiel to a given Type
            </summary>
            <typeparam name="T">Type of the returning Object</typeparam>
            <param name="configurationFile">Input File containing the XML-String</param>
            <returns>De-serialized object of the given Type</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.WriteXmlFile``1(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToWrite"></param>
            <param name="configurationFile"></param>
            <returns></returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.ReadXmlFile``1">
            <summary>
            Read the given XML-Fiel to an object
            </summary>
            <typeparam name="T">Type of the returning Object</typeparam>
            <returns>De-serialized Object</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.WriteXmlFile``1(``0)">
            <summary>
            Write a given Object to the given XML-File
            </summary>
            <typeparam name="T">Type of the Object to be serialized</typeparam>
            <param name="objectToWrite">Object to be written</param>
            <returns>Return True on Success. Returns false on fail</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.GetLogText">
            <summary>
            Function returns the LogMessages
            </summary>
            <returns>LogMessages</returns>
        </member>
        <member name="P:EasyXMLSerializer.SerializeTool.LastError">
            <summary>
            Last Error
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.SerializeTool.ConfigurationFileName">
            <summary>
            Configuration - File
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.SerializeTool.EmptyNamespaces">
            <summary>
            If True the Serializer do not create Namespaces
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.OnLogEvent(System.String)">
            <summary>
            Raise the LogEvent
            </summary>
            <param name="message">Message to be send to The Event</param>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.GetDtdValidator">
            <summary>
            Gets a DtdValidator.
            You can Validate your XML-File with the DTD - Information form your Header.
            This function takes the given XML-File
            </summary>
            <returns>XmlDtdValidator</returns>
        </member>
        <member name="M:EasyXMLSerializer.SerializeTool.GetDtdValidator(System.String)">
            <summary>
            Gets a DtdValidator.
            You can Validate your XML-File with the DTD - Information form your Header.
            This function takes the full-path of an xml-File
            </summary>
            <param name="file">Full - Path to XML-File</param>
            <returns>XmlDtdValidator</returns>
        </member>
        <member name="T:EasyXMLSerializer.Validation.DtdMessageType">
            <summary>
            Enum shows which Message was given
            </summary>
        </member>
        <member name="F:EasyXMLSerializer.Validation.DtdMessageType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:EasyXMLSerializer.Validation.DtdMessageType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:EasyXMLSerializer.Validation.ValidationErrorInfo">
            <summary>
            ValidationError-Info
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.Validation.ValidationErrorInfo.#ctor(System.String,System.Int32,System.Int32,System.Exception,EasyXMLSerializer.Validation.DtdMessageType)">
            <summary>
            CTOR
            </summary>
            <param name="message">Message</param>
            <param name="lineNumber">Line Number</param>
            <param name="linePosition">Position in Line</param>
            <param name="exception">Inner Exception</param>
            <param name="messageType">Type of the Message (Error or Warning)</param>
        </member>
        <member name="M:EasyXMLSerializer.Validation.ValidationErrorInfo.#ctor(System.String,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="eventArg"></param>
        </member>
        <member name="P:EasyXMLSerializer.Validation.ValidationErrorInfo.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.ValidationErrorInfo.LineNumber">
            <summary>
            Line Number
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.ValidationErrorInfo.LinePosition">
            <summary>
            Positon in Line
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.ValidationErrorInfo.Exception">
            <summary>
            Inner Exception
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.ValidationErrorInfo.MessageType">
            <summary>
            DtdMessageType
            </summary>
        </member>
        <member name="T:EasyXMLSerializer.Validation.XmlDtdValidator">
            <summary>
            Class to execute a DTD-Validation
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.XmlDtdValidator.Errors">
            <summary>
            The amount of Errors
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.XmlDtdValidator.Warnings">
            <summary>
            The amount of Warnings
            </summary>
        </member>
        <member name="P:EasyXMLSerializer.Validation.XmlDtdValidator.LastExceptions">
            <summary>
            List of found Exceptions
            </summary>
        </member>
        <member name="M:EasyXMLSerializer.Validation.XmlDtdValidator.#ctor(System.String)">
            <summary>
            Contructor für the class.
            The file to Validate must be given!
            </summary>
            <param name="file">Existing XML-FILE</param>
        </member>
        <member name="M:EasyXMLSerializer.Validation.XmlDtdValidator.Validate">
            <summary>
            Validates the File
            If there is a valid DTD-Header
            </summary>
            <returns>true/false</returns>
        </member>
    </members>
</doc>
